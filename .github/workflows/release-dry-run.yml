name: Release Dry Run

on:
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '00 05 * * *'  # Run at 05:00 UTC every day
  workflow_dispatch:

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.version.outputs.version }}
      no_release: ${{ steps.version.outputs.no_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull linux-amd64 image
        run: |
          docker pull ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-amd64

      - name: Calculate version
        id: version
        continue-on-error: true
        run: |
          # Use semantic-release to calculate the next version based on conventional commits
          # This is more reliable than git_ops
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -v ${{ github.workspace }}/scripts:/scripts \
            -v ${{ github.workspace }}/.git:/app/.git \
            ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-amd64 \
            bash /scripts/calculate-version.sh
          
          VERSION=$(cat version.txt)
          
          if [ "$VERSION" = "NO_RELEASE_NEEDED" ]; then
            echo "No new version needed. Stopping pipeline."
            echo "no_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "no_release=false" >> $GITHUB_OUTPUT
          echo "Calculated version: $VERSION"

      - name: Upload version calculation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: version-calculation-artifacts
          path: |
            version.txt
            semantic-output.txt
          retention-days: 30

  build-linux-amd64:
    runs-on: ubuntu-latest
    needs: calculate-version
    if: needs.calculate-version.result == 'success' && needs.calculate-version.outputs.no_release != 'true'
    steps:
      - name: Cleanup workspace
        run: |
          sudo rm -rf ${{ github.workspace }}/*

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download PKCS11 headers
        run: |
          bash ${{ github.workspace }}/scripts/download-pkcs11-headers.sh ${{ github.workspace }}/c_src
          ls -al ${{ github.workspace }}/c_src
  
      - name: Pull linux-amd64 image
        run: |
          docker pull ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-amd64

      - name: Build and test linux-amd64
        run: |
          docker run --rm \
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            -e MIX_ENV=test \
            -v ${{ github.workspace }}:/app \
            ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-amd64 \
            sh -c "cd /app && \
              export SOFTHSM2_CONF=\$(mktemp) && \
              export MAKE_TOKEN_DIR=yes && \
              ls -la c_src && \
              sh test/softhsm-reset.sh && \
              mix local.hex --force && \
              mix deps.get && \
              mix compile && \
              mix test --exclude yubikey && \
              # Build p11ex_cli escript
              cd test_apps/p11ex_cli && \
              mix deps.get && \
              mix escript.build"

      - name: Upload linux-amd64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64-artifacts
          path: |
            _build/
            priv/
            test_apps/p11ex_cli/p11ex_cli

  build-linux-arm64:
    runs-on: [self-hosted, Linux, ARM64]
    needs: calculate-version
    if: needs.calculate-version.result == 'success' && needs.calculate-version.outputs.no_release != 'true'
    steps:
      - name: Cleanup workspace
        run: |
          sudo rm -rf ${{ github.workspace }}/*

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull linux-arm64 image
        run: |
          docker pull ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-arm64

      - name: Build and test linux-arm64
        run: |
          docker run --rm \
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            -e MIX_ENV=test \
            -v ${{ github.workspace }}:/app \
            ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-arm64 \
            sh -c "cd /app && \
              bash scripts/download-pkcs11-headers.sh c_src && \
              export SOFTHSM2_CONF=\$(mktemp) && \
              export MAKE_TOKEN_DIR=yes && \
              find . && \
              sh test/softhsm-reset.sh && \
              mix local.hex --force && \
              mix deps.get && \
              mix compile && \
              mix test --exclude yubikey && \
              # Build p11ex_cli escript
              cd test_apps/p11ex_cli && \
              mix deps.get && \
              mix escript.build"

      - name: Upload linux-arm64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-artifacts
          path: |
            _build/
            priv/
            test_apps/p11ex_cli/p11ex_cli

  build-macos-arm64:
    runs-on: macos-latest
    needs: calculate-version
    if: needs.calculate-version.result == 'success' && needs.calculate-version.outputs.no_release != 'true'
    steps:
      - name: Cleanup workspace
        run: |
          sudo rm -rf ${{ github.workspace }}/*

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download PKCS11 headers
        run: |
          bash ${{ github.workspace }}/scripts/download-pkcs11-headers.sh ${{ github.workspace }}/c_src
          ls -al ${{ github.workspace }}/c_src

      - name: Install Erlang and Elixir
        run: |
          brew install erlang elixir

      - name: Install build tools
        run: |
          brew install autoconf automake

      - name: Install PKCS11 tools
        run: |
          brew install pkcs11-tools opensc

      - name: Checkout SoftHSMv2 at tag 2.6.1 (shallow clone)
        run: |
          git clone --branch 2.6.1 --depth 1 https://github.com/softhsm/SoftHSMv2.git

      - name: Configure SoftHSM Build
        run: |
          mkdir ${{ github.workspace }}/softhsm
          cd SoftHSMv2
          ./autogen.sh
          ./configure --prefix=${{ github.workspace }}/softhsm --enable-ecc --enable-eddsa --with-openssl=/opt/homebrew/opt/openssl@3 --disable-gost

      - name: Build and install SoftHSM
        run: |
          cd ${{ github.workspace }}/SoftHSMv2
          make
          make install

      - name: Install hex and get dependencies
        run: |
          mix local.hex --force && mix deps.get

      - name: Mix compile
        run: |
          mix compile
          
      - name: Initialize SoftHSM token
        run: |
          mkdir -p ${{ github.workspace }}/token
          env SOFTHSM_PREFIX=${{ github.workspace }}/softhsm \
              PKCS11_MODULE=${{ github.workspace }}/softhsm/lib/softhsm/libsofthsm2.so \
              P11TOOL_PREFIX=/opt/homebrew \
              MAKE_TOKEN_DIR=yes \
            bash -x test/softhsm-reset.sh

      - name: Mix test
        run: |
          env MIX_ENV=test \
              PKCS11_MODULE=${{ github.workspace }}/softhsm/lib/softhsm/libsofthsm2.so \
              SOFTHSM2_CONF=`cat ${{ github.workspace }}/sofhsm-conf.path` \
            mix test --cover --trace --exclude yubikey

      - name: Build p11ex_cli escript
        run: |
          cd test_apps/p11ex_cli
          mix deps.get
          mix escript.build

      - name: Upload macos-arm64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-artifacts
          path: |
            _build/
            priv/
            test_apps/p11ex_cli/p11ex_cli

  dry-run-summary:
    runs-on: ubuntu-latest
    needs: [calculate-version, build-linux-amd64, build-linux-arm64, build-macos-arm64]
    if: needs.calculate-version.result == 'success' && needs.calculate-version.outputs.no_release != 'true' && inputs.dry_run == 'true'
    steps:
      - name: Dry Run Summary
        run: |
          echo "## 🔍 Dry Run Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Calculated Version:** \`${{ needs.calculate-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- Linux AMD64: ✅ Built successfully" >> $GITHUB_STEP_SUMMARY
          echo "- Linux ARM64: ✅ Built successfully" >> $GITHUB_STEP_SUMMARY
          echo "- macOS ARM64: ✅ Built successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the calculated version above" >> $GITHUB_STEP_SUMMARY
          echo "2. Make any necessary adjustments to CHANGELOG.md or other files" >> $GITHUB_STEP_SUMMARY
          echo "3. Run the workflow again with \`dry_run\` set to \`false\` to perform the actual release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** No git tags were created and no packages were published to Hex.pm." >> $GITHUB_STEP_SUMMARY
