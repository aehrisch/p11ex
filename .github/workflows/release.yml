name: Release to Hex.pm

on:
  push:
    branches: [ main ]
    tags: []

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      no_release: ${{ steps.version.outputs.no_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull linux-amd64 image
        run: |
          docker pull ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-amd64

      - name: Calculate version
        id: version
        continue-on-error: true
        run: |
          # Use semantic-release to calculate the next version based on conventional commits
          # This is more reliable than git_ops
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -v ${{ github.workspace }}/scripts:/scripts \
            ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-amd64 \
            bash /scripts/calculate-version.sh
          
          VERSION=$(cat version.txt)
          
          if [ "$VERSION" = "NO_RELEASE_NEEDED" ]; then
            echo "No new version needed. Stopping pipeline."
            echo "no_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "no_release=false" >> $GITHUB_OUTPUT
          echo "Calculated version: $VERSION"

  no-release-needed:
    runs-on: ubuntu-latest
    needs: calculate-version
    if: needs.calculate-version.result == 'success' && needs.calculate-version.outputs.no_release == 'true'
    steps:
      - name: No Release Needed
        run: |
          echo "## âœ… No Release Needed" >> $GITHUB_STEP_SUMMARY
          echo "No conventional commits found that would trigger a new release." >> $GITHUB_STEP_SUMMARY
          echo "The pipeline completed successfully without creating a release." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To trigger a release, make sure your commits follow the conventional commit format:" >> $GITHUB_STEP_SUMMARY
          echo "- feat: for new features" >> $GITHUB_STEP_SUMMARY
          echo "- fix: for bug fixes" >> $GITHUB_STEP_SUMMARY
          echo "- BREAKING CHANGE: for breaking changes" >> $GITHUB_STEP_SUMMARY

  build-linux-amd64:
    runs-on: ubuntu-latest
    needs: calculate-version
    if: needs.calculate-version.result == 'success' && needs.calculate-version.outputs.no_release != 'true'
    steps:
      - name: Cleanup workspace
        run: |
          sudo rm -rf ${{ github.workspace }}/*

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download PKCS11 headers
        run: |
          bash ${{ github.workspace }}/scripts/download-pkcs11-headers.sh ${{ github.workspace }}/c_src
          ls -al ${{ github.workspace }}/c_src
  
      - name: Pull linux-amd64 image
        run: |
          docker pull ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-amd64

      - name: Build and test linux-amd64
        run: |
          docker run --rm \
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            -e MIX_ENV=test \
            -v ${{ github.workspace }}:/app \
            ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-amd64 \
            sh -c "cd /app && \
              export SOFTHSM2_CONF=\$(mktemp) && \
              export MAKE_TOKEN_DIR=yes && \
              ls -la c_src && \
              sh test/softhsm-reset.sh && \
              mix local.hex --force && \
              mix deps.get && \
              mix compile && \
              mix test --exclude yubikey"

      - name: Upload linux-amd64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64-artifacts
          path: |
            _build/
            priv/

  build-linux-arm64:
    runs-on: [self-hosted, Linux, ARM64]
    needs: calculate-version
    if: needs.calculate-version.result == 'success' && needs.calculate-version.outputs.no_release != 'true'
    steps:
      - name: Cleanup workspace
        run: |
          sudo rm -rf ${{ github.workspace }}/*

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull linux-arm64 image
        run: |
          docker pull ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-arm64

      - name: Build and test linux-arm64
        run: |
          docker run --rm \
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            -e MIX_ENV=test \
            -v ${{ github.workspace }}:/app \
            ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-arm64 \
            sh -c "cd /app && \
              bash scripts/download-pkcs11-headers.sh c_src && \
              export SOFTHSM2_CONF=\$(mktemp) && \
              export MAKE_TOKEN_DIR=yes && \
              find . && \
              sh test/softhsm-reset.sh && \
              mix local.hex --force && \
              mix deps.get && \
              mix compile && \
              mix test --exclude yubikey"

      - name: Upload linux-arm64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-artifacts
          path: |
            _build/
            priv/

  build-macos-arm64:
    runs-on: macos-latest
    needs: calculate-version
    if: needs.calculate-version.result == 'success' && needs.calculate-version.outputs.no_release != 'true'
    steps:
      - name: Cleanup workspace
        run: |
          sudo rm -rf ${{ github.workspace }}/*

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download PKCS11 headers
        run: |
          bash ${{ github.workspace }}/scripts/download-pkcs11-headers.sh ${{ github.workspace }}/c_src
          ls -al ${{ github.workspace }}/c_src

      - name: Install Erlang and Elixir
        run: |
          brew install erlang elixir

      - name: Install build tools
        run: |
          brew install autoconf automake

      - name: Install PKCS11 tools
        run: |
          brew install pkcs11-tools opensc

      - name: Checkout SoftHSMv2 at tag 2.6.1 (shallow clone)
        run: |
          git clone --branch 2.6.1 --depth 1 https://github.com/softhsm/SoftHSMv2.git

      - name: Configure SoftHSM Build
        run: |
          mkdir ${{ github.workspace }}/softhsm
          cd SoftHSMv2
          ./autogen.sh
          ./configure --prefix=${{ github.workspace }}/softhsm --enable-ecc --enable-eddsa --with-openssl=/opt/homebrew/opt/openssl@3 --disable-gost

      - name: Build and install SoftHSM
        run: |
          cd ${{ github.workspace }}/SoftHSMv2
          make
          make install

      - name: Install hex and get dependencies
        run: |
          mix local.hex --force && mix deps.get

      - name: Mix compile
        run: |
          mix compile
          
      - name: Initialize SoftHSM token
        run: |
          mkdir -p ${{ github.workspace }}/token
          env SOFTHSM_PREFIX=${{ github.workspace }}/softhsm \
              PKCS11_MODULE=${{ github.workspace }}/softhsm/lib/softhsm/libsofthsm2.so \
              P11TOOL_PREFIX=/opt/homebrew \
              MAKE_TOKEN_DIR=yes \
            bash -x test/softhsm-reset.sh

      - name: Mix test
        run: |
          env MIX_ENV=test \
              PKCS11_MODULE=${{ github.workspace }}/softhsm/lib/softhsm/libsofthsm2.so \
              SOFTHSM2_CONF=`cat ${{ github.workspace }}/sofhsm-conf.path` \
            mix test --cover --trace --exclude yubikey

      - name: Upload macos-arm64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-artifacts
          path: |
            _build/
            priv/

  release:
    runs-on: ubuntu-latest
    needs: [calculate-version, build-linux-amd64, build-linux-arm64, build-macos-arm64]
    if: needs.calculate-version.result == 'success' && needs.calculate-version.outputs.no_release != 'true'
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull linux-amd64 image
        run: |
          docker pull ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-amd64

      - name: Debug version output
        run: |
          VERSION="${{ needs.calculate-version.outputs.version }}"
          echo "Version from calculate-version job: '$VERSION'"
          echo "Version length: ${#VERSION}"

      - name: Create git tag
        id: tag
        run: |
          VERSION="${{ needs.calculate-version.outputs.version }}"
          if [ -z "$VERSION" ]; then
            echo "ERROR: Version is empty, cannot create git tag"
            exit 1
          fi
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Update version in mix.exs
        run: |
          VERSION="${{ needs.calculate-version.outputs.version }}"
          # Update the version in mix.exs
          sed -i "s/version: \".*\"/version: \"$VERSION\"/" mix.exs

      - name: Download all architecture artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Combine multi-architecture binaries
        run: |
          # Create the priv directory structure
          mkdir -p priv
          
          # Copy binaries from all architectures
          if [ -d "artifacts/linux-amd64-artifacts/priv" ]; then
            cp -r artifacts/linux-amd64-artifacts/priv/* priv/
          fi
          
          if [ -d "artifacts/linux-arm64-artifacts/priv" ]; then
            cp -r artifacts/linux-arm64-artifacts/priv/* priv/
          fi
          
          if [ -d "artifacts/macos-arm64-artifacts/priv" ]; then
            cp -r artifacts/macos-arm64-artifacts/priv/* priv/
          fi
          
          # List what we have
          echo "Combined binaries:"
          find priv -type f

      - name: Download PKCS11 headers
        run: |
          bash ${{ github.workspace }}/scripts/download-pkcs11-headers.sh ${{ github.workspace }}/c_src
          ls -al ${{ github.workspace }}/c_src

      - name: Generate changelog and prepare release
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-amd64 \
            sh -c "cd /app && \
              mix local.hex --force && \
              mix deps.get && \
              mix docs && \
              mix hex.build"

      - name: Publish to Hex.pm
        env:
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
        run: |
          docker run --rm \
            -e HEX_API_KEY=${{ secrets.HEX_API_KEY }} \
            -v ${{ github.workspace }}:/app \
            ghcr.io/${{ github.repository }}/p11ex-test:latest-linux-amd64 \
            sh -c "cd /app && \
              mix local.hex --force && \
              mix deps.get && \
              mix compile && \
              mix hex.publish --yes"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}
          body: |
            ## Changes in this release
            
            See [CHANGELOG.md](CHANGELOG.md) for detailed information about this release.
            
            ## Installation
            
            ```elixir
            def deps do
              [
                {:p11ex, "~> ${{ needs.calculate-version.outputs.version }}"}
              ]
            end
            ```
            
            ## Supported Architectures
            
            This release includes pre-compiled NIF binaries for:
            - Linux AMD64
            - Linux ARM64  
            - macOS ARM64
          draft: false
          prerelease: false 
